server {
    listen 80;
    listen 443 ssl;
    server_name registry.local;

    ssl_certificate /etc/nginx/certs/registry.local.crt;
    ssl_certificate_key /etc/nginx/certs/registry.local.key;

    # Configure upstream
    resolver 127.0.0.11 valid=30s;
    set $upstream_backend "http://backend:8000";

    # Standard proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass_request_headers on;

    # Increase proxy timeouts
    proxy_connect_timeout 300;
    proxy_send_timeout 300;
    proxy_read_timeout 300;
    send_timeout 300;

    # Service Discovery endpoint
    location = /.well-known/terraform.json {
        proxy_pass $upstream_backend;
    }

    # Module version listing
    location ~ ^/v1/modules/[^/]+/[^/]+/[^/]+/versions$ {
        proxy_pass $upstream_backend;
    }

    # Direct version listing (without v1/modules prefix)
    location ~ ^/[^/]+/[^/]+/[^/]+/versions$ {
        rewrite ^/([^/]+)/([^/]+)/([^/]+)/versions$ /v1/modules/$1/$2/$3/versions break;
        proxy_pass $upstream_backend;
    }

    # Module source download
    location ~ ^/v1/modules/[^/]+/[^/]+/[^/]+/[^/]+/source$ {
        proxy_hide_header X-Terraform-Get;
        proxy_pass $upstream_backend;
        add_header X-Terraform-Get $upstream_http_x_terraform_get always;
    }

    # Legacy paths without v1/modules prefix
    location ~ ^/[^/]+/[^/]+/[^/]+/[^/]+/source$ {
        rewrite ^/([^/]+)/([^/]+)/([^/]+)/([^/]+)/source$ /v1/modules/$1/$2/$3/$4/source break;
        proxy_hide_header X-Terraform-Get;
        proxy_pass $upstream_backend;
        add_header X-Terraform-Get $upstream_http_x_terraform_get always;
    }

    # All other requests
    location / {
        proxy_pass $upstream_backend;
        client_max_body_size 100M;
    }
}